variablesResolutionMode: 20210326
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: juca-lite-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-bundle
  - serverless-deployment-bucket
  - serverless-offline

package:
  individually: true

custom:
  stage: ${opt:stage, env:STAGE, 'dev'}
  bundle:
    linting: true
  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: false

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  apiName: 'juca-lite-${self:provider.stage}'
  lambdaHashingVersion: 20201221
  deploymentBucket:
    name: 'juca-lite-${self:provider.stage}-deploy-bucket'

# you can overwrite defaults here
  stage: ${self:custom.stage}
  region: us-east-1

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'logs:*'
          Resource: '*'
        - Effect: Allow
          Action:
            - 'lambda:*'
          Resource: '*'
        - Effect: Allow
          Action:
            - 'dynamodb:*'
          Resource: ['arn:aws:dynamodb:${self:provider.region}:${file(./serverless.js):getAccountId}:table/juca-lite-${self:provider.stage}-demo']

  environment:
    STAGE: ${env:STAGE}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  get:
    handler: router/products/get.handler
    events:
      - http:
          path: /products/list
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

#      - cognitoUserPool:
#          pool: us-east-1_t7k457Ntx
#          trigger: PreSignUp
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        # Change the property UserPoolName
        UserPoolName: 'juca-lite-${self:provider.stage}-userpool'
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        #AllowAdminCreateUserOnly: True
        #UsernameAttributes:
        #  - username
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False
            TemporaryPasswordValidityDays: 90

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        # Change the property ClientName
        ClientName: 'jucalite-${self:provider.stage}-app_clientWeb'
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    UserPool:
      Type: AWS::Cognito::UserPool
